{"version":3,"sources":["components/ErrorCard.tsx","components/BoardCard.tsx","useLeaderboard.ts","theme.ts","components/EntryListItem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledCardContent","withStyles","theme","root","backgroundColor","red","CardContent","ErrorCard","errorMessage","technicalMessage","Card","Typography","variant","StyledCard","StyledCardHeader","palette","primary","dark","textAlign","title","color","fontFamily","CardHeader","BoardCard","children","sortEntry","entry","otherEntry","score","useLeaderboard","useState","entries","setEntries","error","setError","useEffect","a","fetch","then","data","json","response","length","sort","reverse","toString","fetchData","darkTheme","createMuiTheme","type","orange","EntryListItem","name","ListItem","Grid","container","item","xs","App","entryListItems","map","ThemeProvider","Container","maxWidth","style","height","direction","justify","spacing","margin","List","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6be5a050.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { Card, CardContent, Theme, Typography, withStyles } from \"@material-ui/core\";\nimport { red } from \"@material-ui/core/colors\";\n\ninterface Props {\n  errorMessage: string;\n  technicalMessage?: string;\n}\n\nconst StyledCardContent = withStyles((theme: Theme) => ({\n    root: {\n      backgroundColor: red[500],\n    },\n  }))(CardContent);\n  \nconst ErrorCard: FC<Props> = ({ errorMessage, technicalMessage }) => {\n  return (\n    <Card>\n      <StyledCardContent>\n          <Typography>{errorMessage}</Typography>\n          {technicalMessage && <Typography variant=\"body2\">{technicalMessage}</Typography>}\n      </StyledCardContent>\n    </Card>\n  );\n};\n\nexport default ErrorCard;\n","import React, { FC } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Theme,\n  withStyles,\n} from \"@material-ui/core\";\n\nconst StyledCard = withStyles(() => ({\n  root: {\n    backgroundColor: \"transparent\",\n  },\n}))(Card);\n\nconst StyledCardHeader = withStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.primary.dark,\n    textAlign: \"center\",\n  },\n  title: {\n    color: \"black\",\n    fontFamily: \"Vibrocentric-Regular, serif\",\n  },\n}))(CardHeader);\n\nconst StyledCardContent = withStyles(() => ({\n  root: {\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n  },\n}))(CardContent);\n\nconst BoardCard: FC = ({ children }) => {\n  return (\n    <StyledCard>\n      <StyledCardHeader title=\"FREELANCER LEADERBOARD\" />\n      <StyledCardContent>{children}</StyledCardContent>\n    </StyledCard>\n  );\n};\n\nexport default BoardCard;\n","import { useState, useEffect } from \"react\";\n\nexport interface Entry {\n  name: string;\n  score: number;\n  date: string;\n  seed: number;\n}\n\nconst mockResponse: Entry[] = [\n  {\n    name: \"Foo\",\n    score: 10000,\n    date: \"2020-10-17T17:04:44.936Z\",\n    seed: 4,\n  },\n  {\n    name: \"Bar\",\n    score: 9000,\n    date: \"2020-10-17T17:04:44.936Z\",\n    seed: 4,\n  },\n  //   {\n  //     name: \"Baz\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bat\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Foo\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bar\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Baz\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bat\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Foo\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bar\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Baz\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bat\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Foo\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bar\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Baz\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bat\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Foo\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bar\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Baz\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bat\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Foo\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Bar\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  //   {\n  //     name: \"Baz\",\n  //     score: 10000,\n  //     date: \"2020-10-17T17:04:44.936Z\",\n  //     seed: 4,\n  //   },\n  {\n    name: \"Bat\",\n    score: 11000,\n    date: \"2020-10-17T17:04:44.936Z\",\n    seed: 4,\n  },\n];\n\nconst sortEntry = (entry: Entry, otherEntry: Entry): number =>\n  entry.score - otherEntry.score;\n\nconst useLeaderboard = () => {\n  const [entries, setEntries] = useState<Entry[]>([]);\n  const [error, setError] = useState<\n    { errorMessage: string; technicalMessage?: string } | undefined\n  >();\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(\n          //   \"http://localhost:9009/?get=https://u3jbutkvth.execute-api.eu-west-1.amazonaws.com/prod/scores?seed=4\"\n          \"https://u3jbutkvth.execute-api.eu-west-1.amazonaws.com/prod/scores?seed=4\"\n        ).then((data) => data.json());\n\n        // TODO update every n seconds\n        if (response.length > 0) {\n          setEntries(response.sort(sortEntry).reverse());\n        //   setEntries(mockResponse.sort(sortEntry).reverse());\n        } else {\n          setError({ errorMessage: \"Could not update leaderboard\" });\n        }\n      } catch (err) {\n        setError({\n          errorMessage: \"Could not update leaderboard\",\n          technicalMessage: err.toString(),\n        });\n      }\n    }\n    fetchData();\n  }, []);\n\n  return { entries, error };\n};\n\nexport default useLeaderboard;\n","import { createMuiTheme } from \"@material-ui/core\";\nimport { orange } from \"@material-ui/core/colors\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: orange,\n  },\n});\n\nexport default darkTheme;\n","import React, { FC } from \"react\";\nimport { ListItem, Grid } from \"@material-ui/core\";\nimport { Entry } from \"../useLeaderboard\";\n\ninterface Props {\n  entry: Entry;\n}\n\nconst EntryListItem: FC<Props> = ({ entry: { name, score } }) => (\n  <ListItem>\n    <Grid container>\n      <Grid item xs>\n        {name}\n      </Grid>\n      <Grid item xs={3}>\n        {score}\n      </Grid>\n    </Grid>\n  </ListItem>\n);\n\nexport default EntryListItem;\n","import React, { FC } from \"react\";\nimport \"./App.css\";\n\nimport {\n  Container,\n  ThemeProvider,\n  List,\n  Grid,\n} from \"@material-ui/core\";\nimport ErrorCard from \"./components/ErrorCard\";\nimport BoardCard from \"./components/BoardCard\";\nimport useLeaderboard from \"./useLeaderboard\";\n\nimport theme from \"./theme\";\nimport EntryListItem from \"./components/EntryListItem\";\n\nconst App: FC = () => {\n  const { entries, error } = useLeaderboard();\n\n  const entryListItems = entries.map((entry) => (\n    <EntryListItem key={entry.name} entry={entry} />\n  ));\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container maxWidth=\"sm\" style={{ height: \"100%\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          spacing={4}\n          style={{ height: \"100%\", margin: 0 }}\n        >\n          <Grid item>\n            <BoardCard>\n              <List>{entryListItems}</List>\n            </BoardCard>\n          </Grid>\n          {error && (\n            <Grid item>\n              <ErrorCard\n                errorMessage={error.errorMessage}\n                technicalMessage={error.technicalMessage}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}